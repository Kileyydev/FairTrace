/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ProductRegistry {
  export type ProductRecordStruct = {
    pid: string;
    title: string;
    farmerEmail: string;
    timestamp: BigNumberish;
    metadataURI: string;
    location: string;
  };

  export type ProductRecordStructOutput = [
    pid: string,
    title: string,
    farmerEmail: string,
    timestamp: bigint,
    metadataURI: string,
    location: string
  ] & {
    pid: string;
    title: string;
    farmerEmail: string;
    timestamp: bigint;
    metadataURI: string;
    location: string;
  };
}

export interface ProductRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllProducts"
      | "getProduct"
      | "owner"
      | "registerProduct"
      | "updateProductLocation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProductLocationUpdated" | "ProductRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllProducts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getProduct", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerProduct",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductLocation",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductLocation",
    data: BytesLike
  ): Result;
}

export namespace ProductLocationUpdatedEvent {
  export type InputTuple = [
    pid: string,
    newLocation: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    pid: string,
    newLocation: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    pid: string;
    newLocation: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductRegisteredEvent {
  export type InputTuple = [
    pid: string,
    title: string,
    farmerEmail: string,
    timestamp: BigNumberish,
    metadataURI: string
  ];
  export type OutputTuple = [
    pid: string,
    title: string,
    farmerEmail: string,
    timestamp: bigint,
    metadataURI: string
  ];
  export interface OutputObject {
    pid: string;
    title: string;
    farmerEmail: string;
    timestamp: bigint;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProductRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ProductRegistry;
  waitForDeployment(): Promise<this>;

  interface: ProductRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllProducts: TypedContractMethod<
    [],
    [ProductRegistry.ProductRecordStructOutput[]],
    "view"
  >;

  getProduct: TypedContractMethod<
    [pid: string],
    [ProductRegistry.ProductRecordStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerProduct: TypedContractMethod<
    [pid: string, title: string, farmerEmail: string, metadataURI: string],
    [void],
    "nonpayable"
  >;

  updateProductLocation: TypedContractMethod<
    [pid: string, newLocation: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllProducts"
  ): TypedContractMethod<
    [],
    [ProductRegistry.ProductRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [pid: string],
    [ProductRegistry.ProductRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerProduct"
  ): TypedContractMethod<
    [pid: string, title: string, farmerEmail: string, metadataURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductLocation"
  ): TypedContractMethod<
    [pid: string, newLocation: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProductLocationUpdated"
  ): TypedContractEvent<
    ProductLocationUpdatedEvent.InputTuple,
    ProductLocationUpdatedEvent.OutputTuple,
    ProductLocationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductRegistered"
  ): TypedContractEvent<
    ProductRegisteredEvent.InputTuple,
    ProductRegisteredEvent.OutputTuple,
    ProductRegisteredEvent.OutputObject
  >;

  filters: {
    "ProductLocationUpdated(string,string,uint256)": TypedContractEvent<
      ProductLocationUpdatedEvent.InputTuple,
      ProductLocationUpdatedEvent.OutputTuple,
      ProductLocationUpdatedEvent.OutputObject
    >;
    ProductLocationUpdated: TypedContractEvent<
      ProductLocationUpdatedEvent.InputTuple,
      ProductLocationUpdatedEvent.OutputTuple,
      ProductLocationUpdatedEvent.OutputObject
    >;

    "ProductRegistered(string,string,string,uint256,string)": TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;
    ProductRegistered: TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;
  };
}
