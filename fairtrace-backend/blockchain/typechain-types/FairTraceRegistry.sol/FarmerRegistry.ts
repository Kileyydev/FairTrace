/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FarmerRegistry {
  export type FarmerStruct = {
    farmerId: BigNumberish;
    fullName: string;
    nationalIdHash: string;
    farmLocation: string;
    wallet: AddressLike;
  };

  export type FarmerStructOutput = [
    farmerId: bigint,
    fullName: string,
    nationalIdHash: string,
    farmLocation: string,
    wallet: string
  ] & {
    farmerId: bigint;
    fullName: string;
    nationalIdHash: string;
    farmLocation: string;
    wallet: string;
  };
}

export interface FarmerRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "farmers" | "getFarmer" | "registerFarmer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FarmerRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "farmers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFarmer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFarmer",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "farmers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFarmer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFarmer",
    data: BytesLike
  ): Result;
}

export namespace FarmerRegisteredEvent {
  export type InputTuple = [
    farmerId: BigNumberish,
    fullName: string,
    farmLocation: string,
    wallet: AddressLike
  ];
  export type OutputTuple = [
    farmerId: bigint,
    fullName: string,
    farmLocation: string,
    wallet: string
  ];
  export interface OutputObject {
    farmerId: bigint;
    fullName: string;
    farmLocation: string;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FarmerRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): FarmerRegistry;
  waitForDeployment(): Promise<this>;

  interface: FarmerRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  farmers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        farmerId: bigint;
        fullName: string;
        nationalIdHash: string;
        farmLocation: string;
        wallet: string;
      }
    ],
    "view"
  >;

  getFarmer: TypedContractMethod<
    [_farmerId: BigNumberish],
    [FarmerRegistry.FarmerStructOutput],
    "view"
  >;

  registerFarmer: TypedContractMethod<
    [_fullName: string, _nationalIdHash: string, _farmLocation: string],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "farmers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        farmerId: bigint;
        fullName: string;
        nationalIdHash: string;
        farmLocation: string;
        wallet: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFarmer"
  ): TypedContractMethod<
    [_farmerId: BigNumberish],
    [FarmerRegistry.FarmerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerFarmer"
  ): TypedContractMethod<
    [_fullName: string, _nationalIdHash: string, _farmLocation: string],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "FarmerRegistered"
  ): TypedContractEvent<
    FarmerRegisteredEvent.InputTuple,
    FarmerRegisteredEvent.OutputTuple,
    FarmerRegisteredEvent.OutputObject
  >;

  filters: {
    "FarmerRegistered(uint256,string,string,address)": TypedContractEvent<
      FarmerRegisteredEvent.InputTuple,
      FarmerRegisteredEvent.OutputTuple,
      FarmerRegisteredEvent.OutputObject
    >;
    FarmerRegistered: TypedContractEvent<
      FarmerRegisteredEvent.InputTuple,
      FarmerRegisteredEvent.OutputTuple,
      FarmerRegisteredEvent.OutputObject
    >;
  };
}
