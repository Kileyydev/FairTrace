/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  ProductRegistry,
  ProductRegistryInterface,
} from "../ProductRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "pid",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "farmerEmail",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ProductRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pid",
        type: "string",
      },
    ],
    name: "getProduct",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "pid",
            type: "string",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "farmerEmail",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
        ],
        internalType: "struct ProductRegistry.ProductRecord",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "records",
    outputs: [
      {
        internalType: "string",
        name: "pid",
        type: "string",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "farmerEmail",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "metadataURI",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pid",
        type: "string",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "farmerEmail",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadataURI",
        type: "string",
      },
    ],
    name: "registerProduct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600080546001600160a01b03191633179055610dc1806100316000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063541e771d1461005157806368111cce1461007e5780638799d6fc1461009e5780638da5cb5b146100b3575b600080fd5b61006461005f366004610871565b6100de565b604051610075959493929190610970565b60405180910390f35b61009161008c366004610a18565b610337565b6040516100759190610a5a565b6100b16100ac366004610ae2565b6105ee565b005b6000546100c6906001600160a01b031681565b6040516001600160a01b039091168152602001610075565b805160208183018101805160018252928201919093012091528054819061010490610bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461013090610bb9565b801561017d5780601f106101525761010080835404028352916020019161017d565b820191906000526020600020905b81548152906001019060200180831161016057829003601f168201915b50505050509080600101805461019290610bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546101be90610bb9565b801561020b5780601f106101e05761010080835404028352916020019161020b565b820191906000526020600020905b8154815290600101906020018083116101ee57829003601f168201915b50505050509080600201805461022090610bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461024c90610bb9565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b5050505050908060030154908060040180546102b490610bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546102e090610bb9565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b5050505050905085565b6103696040518060a0016040528060608152602001606081526020016060815260200160008152602001606081525090565b6001838360405161037b929190610bf3565b90815260200160405180910390206040518060a00160405290816000820180546103a490610bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d090610bb9565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b5050505050815260200160018201805461043690610bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461046290610bb9565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b505050505081526020016002820180546104c890610bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546104f490610bb9565b80156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b505050505081526020016003820154815260200160048201805461056490610bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461059090610bb9565b80156105dd5780601f106105b2576101008083540402835291602001916105dd565b820191906000526020600020905b8154815290600101906020018083116105c057829003601f168201915b505050505081525050905092915050565b8661062f5760405162461bcd60e51b815260206004820152600c60248201526b1c1a59081c995c5d5a5c995960a21b60448201526064015b60405180910390fd5b60018888604051610641929190610bf3565b908152604051908190036020019020805461065b90610bb9565b1590506106975760405162461bcd60e51b815260206004820152600a6024820152697069642065786973747360b01b6044820152606401610626565b6040518060a0016040528089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f8801819004810282018101909252868152918101919087908790819084018382808284376000920191909152505050908252504260208083019190915260408051601f8601839004830281018301825285815292019190859085908190840183828082843760009201919091525050509152506040516001906107a4908b908b90610bf3565b908152604051908190036020019020815181906107c19082610c52565b50602082015160018201906107d69082610c52565b50604082015160028201906107eb9082610c52565b50606082015160038201556080820151600482019061080a9082610c52565b509050507f133503b6fe70c79499afb95a8b9ad7cce6e40b92e988d27ea9a97cfaa32b639e888888888888426040516108499796959493929190610d3a565b60405180910390a15050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561088357600080fd5b813567ffffffffffffffff81111561089a57600080fd5b8201601f810184136108ab57600080fd5b803567ffffffffffffffff8111156108c5576108c561085b565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156108f4576108f461085b565b60405281815282820160200186101561090c57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000815180845260005b8181101561095057602081850181015186830182015201610934565b506000602082860101526020601f19601f83011685010191505092915050565b60a08152600061098360a083018861092a565b8281036020840152610995818861092a565b905082810360408401526109a9818761092a565b905084606084015282810360808401526109c3818561092a565b98975050505050505050565b60008083601f8401126109e157600080fd5b50813567ffffffffffffffff8111156109f957600080fd5b602083019150836020828501011115610a1157600080fd5b9250929050565b60008060208385031215610a2b57600080fd5b823567ffffffffffffffff811115610a4257600080fd5b610a4e858286016109cf565b90969095509350505050565b602081526000825160a06020840152610a7660c084018261092a565b90506020840151601f19848303016040850152610a93828261092a565b9150506040840151601f19848303016060850152610ab1828261092a565b915050606084015160808401526080840151601f198483030160a0850152610ad9828261092a565b95945050505050565b6000806000806000806000806080898b031215610afe57600080fd5b883567ffffffffffffffff811115610b1557600080fd5b610b218b828c016109cf565b909950975050602089013567ffffffffffffffff811115610b4157600080fd5b610b4d8b828c016109cf565b909750955050604089013567ffffffffffffffff811115610b6d57600080fd5b610b798b828c016109cf565b909550935050606089013567ffffffffffffffff811115610b9957600080fd5b610ba58b828c016109cf565b999c989b5096995094979396929594505050565b600181811c90821680610bcd57607f821691505b602082108103610bed57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b601f821115610c4d57806000526020600020601f840160051c81016020851015610c2a5750805b601f840160051c820191505b81811015610c4a5760008155600101610c36565b50505b505050565b815167ffffffffffffffff811115610c6c57610c6c61085b565b610c8081610c7a8454610bb9565b84610c03565b6020601f821160018114610cb45760008315610c9c5750848201515b600019600385901b1c1916600184901b178455610c4a565b600084815260208120601f198516915b82811015610ce45787850151825560209485019460019092019101610cc4565b5084821015610d025786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000610d4e60808301898b610d11565b8281036020840152610d6181888a610d11565b90508281036040840152610d76818688610d11565b9150508260608301529897505050505050505056fea2646970667358221220530536ef79d43af3c6ce2715c088b3a31b1a52a493cfff99ab76d3bdb2b192b164736f6c634300081c0033";

type ProductRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProductRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProductRegistry__factory extends ContractFactory {
  constructor(...args: ProductRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ProductRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ProductRegistry__factory {
    return super.connect(runner) as ProductRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProductRegistryInterface {
    return new Interface(_abi) as ProductRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProductRegistry {
    return new Contract(address, _abi, runner) as unknown as ProductRegistry;
  }
}
